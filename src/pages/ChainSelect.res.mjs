// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Time from "../components/Time.res.mjs";
import * as React from "react";
import * as Buttons from "../components/Buttons.res.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.res.mjs";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.res.mjs";

var supportedChains = {
  Amoy: 80002,
  Arbitrum: 42161,
  "Arbitrum Nova": 42170,
  "Arbitrum Sepolia": 421614,
  Aurora: 1313161554,
  Avalanche: 43114,
  Base: 8453,
  "Base Sepolia": 84532,
  "Berachain Artio": 80085,
  Blast: 81457,
  "Blast Sepolia": 168587773,
  Boba: 288,
  BSC: 56,
  "C1 Milkomeda": 2001,
  Celo: 42220,
  Crab: 44,
  Cyber: 7560,
  Darwinia: 46,
  ETH: 1,
  Fantom: 250,
  "Fhenix Testnet": 42069,
  Flare: 14,
  Gnosis: 100,
  "Gnosis Chiado": 10200,
  Goerli: 5,
  "Harmony Shard 0": 1666600000,
  Holesky: 17000,
  Klaytn: 8217,
  Kroma: 255,
  Linea: 59144,
  Lukso: 42,
  Manta: 169,
  Mantle: 5000,
  Metis: 1088,
  Moonbeam: 1284,
  Mumbai: 80001,
  "Neon EVM": 245022934,
  "OKBC Testnet": 195,
  Optimism: 10,
  "Optimism Sepolia": 11155420,
  Polygon: 137,
  "Polygon zkEVM": 1101,
  Publicgoods: 424,
  RSK: 30,
  Scroll: 534352,
  Sepolia: 11155111,
  "Shimmer EVM": 148,
  "Taiko Jolnr": 1088,
  "X Layer": 196,
  Zeta: 7000,
  zkSync: 324,
  Zora: 7777777
};

function ChainSelect(props) {
  var match = React.useState(function () {
        return "HyperSync";
      });
  var setSelectedDataSource = match[1];
  var selectedDataSource = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setSelectedChain = match$1[1];
  var selectedChain = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setRpcUrl = match$2[1];
  var tmp;
  switch (selectedDataSource) {
    case "Rpc" :
        tmp = JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("input", {
                      className: "mt-1 block px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm flex-1",
                      placeholder: "enter custom RPC URL",
                      type: "text",
                      value: match$2[0],
                      onChange: (function (e) {
                          setRpcUrl(e.target.value);
                        })
                    }),
                JsxRuntime.jsx("input", {
                      className: "mt-1 block px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm flex-1",
                      placeholder: "enter ChainId",
                      type: "numeric",
                      value: selectedChain,
                      onChange: (function (e) {
                          setSelectedChain(e.target.value);
                        })
                    }),
                JsxRuntime.jsx("button", {
                      children: "submit",
                      className: "ml-4 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm",
                      onClick: (function (param) {
                          RescriptReactRouter.push("/" + selectedChain);
                        })
                    })
              ],
              className: "mb-4 w-full max-w-[600px] flex items-center space-x-4"
            });
        break;
    case "HyperSync" :
        tmp = JsxRuntime.jsx("div", {
              children: JsxRuntime.jsxs("select", {
                    children: [
                      JsxRuntime.jsx("option", {
                            children: "/ select a chain",
                            value: ""
                          }),
                      Object.keys(supportedChains).map(function (name) {
                            return JsxRuntime.jsx("option", {
                                        children: name,
                                        value: name
                                      }, name);
                          })
                    ],
                    className: "mt-1 block w-full px-3 py-2 border border-primary border-1 bg-white bg-opacity-80 shadow ",
                    onChange: (function (e) {
                        e.preventDefault();
                        Core__Option.map(Core__Option.flatMap(Caml_option.nullable_to_opt(e.target.value), (function (chainName) {
                                    return Js_dict.get(supportedChains, chainName);
                                  })), (function (chainId) {
                                RescriptReactRouter.push("/" + chainId.toString());
                              }));
                      })
                  }),
              className: "mb-4 w-full max-w-[600px]"
            });
        break;
    case "EthArchive" :
        tmp = JsxRuntime.jsx("p", {
              children: "Eth Archive is not implemented yet, we are open to contribution."
            });
        break;
    case "Firehose" :
        tmp = JsxRuntime.jsx("p", {
              children: "Firehose is not implemented yet, we are open to contribution."
            });
        break;
    
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("h1", {
                      children: [
                        Time.useRotatingCharacterAnimation(160, ">?#>?ᗧ*&$⍨])⎌#]"),
                        Time.useTypedCharactersString(35, " / select a data source and network")
                      ],
                      className: "text-4xl font-bold my-3"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx(Buttons.make, {
                              text: "HyperSync",
                              onClick: (function () {
                                  setSelectedDataSource(function (param) {
                                        return "HyperSync";
                                      });
                                }),
                              isActive: selectedDataSource === "HyperSync"
                            }),
                        JsxRuntime.jsx(Buttons.make, {
                              text: "RPC URL",
                              onClick: (function () {
                                  setSelectedDataSource(function (param) {
                                        return "Rpc";
                                      });
                                }),
                              isActive: selectedDataSource === "Rpc"
                            }),
                        JsxRuntime.jsx(Buttons.make, {
                              text: "Firehose",
                              onClick: (function () {
                                  setSelectedDataSource(function (param) {
                                        return "Firehose";
                                      });
                                }),
                              isActive: selectedDataSource === "Firehose"
                            }),
                        JsxRuntime.jsx(Buttons.make, {
                              text: "EthArchive",
                              onClick: (function () {
                                  setSelectedDataSource(function (param) {
                                        return "EthArchive";
                                      });
                                }),
                              isActive: selectedDataSource === "EthArchive"
                            })
                      ],
                      className: "flex flex-col sm:flex-row sm:space-x-4 w-full justify-center my-4"
                    }),
                tmp
              ],
              className: "flex flex-col items-center justify-center h-screen m-0 p-0 text-primary overflow-y-hidden"
            });
}

var make = ChainSelect;

export {
  supportedChains ,
  make ,
}
/* Time Not a pure module */
